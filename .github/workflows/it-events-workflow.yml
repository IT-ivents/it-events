name: CI

on:
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  check_repositories:
    runs-on: ubuntu-22.04

    steps:
      # Проверка доступности главного репозитория, а так же backend и frontend
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run a one-line script
        run: echo Backend and Frontend is ok!

  build_and_push_to_docker_hub:

    name: Push Docker Backend and Frontend images to Docker Hub
    runs-on: ubuntu-22.04
    needs: check_repositories
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Backend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/it_events_backend:v1.0.first
          context: ./backend/it_events/

      - name: Push Frontend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/it_events_frontend:v1.0.first
          context: ./frontend/
  deploy:

     runs-on: ubuntu-22.04
     needs: build_and_push_to_docker_hub
     steps:

     - name: executing remote ssh commands to deploy
       uses: appleboy/ssh-action@master
       with:
         host: ${{ secrets.YANDEX_HOST }}
         passphrase: ${{ secrets.SSH_PASSPHRASE }} # Если ваш ssh-ключ защищён паролем
         username: ${{ secrets.YANDEX_LOGIN }}
         password: ${{ secrets.YANDEX_PASSWORD }}
         key: ${{ secrets.SSH_KEY }}
         script: |
           echo ok!
           echo ok!
           echo ok!
#          sudo docker compose stop
#          sudo docker compose pull backend
#          sudo docker compose rm backend
#
#          touch .env
#          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
#          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
#          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
#          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
#          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
#          echo TIME_ZONE=${{ secrets.TIME_ZONE }} >> .env
#          echo USE_TZ=${{ secrets.USE_TZ }} >> .env
#          echo DEBUG=${{ secrets.DEBUG }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }} >> .env
#          echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
#          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
#          sudo docker compose up -d
#          sudo docker system prune -f
#          sudo docker compose exec backend python manage.py migrate
#          sudo docker compose exec backend python manage.py collectstatic --no-input
#          sudo docker compose exec backend python manage.py loaddata data.json